
< 소프트웨어 공학 >

- 강의계획서

중간시험 20
기말시험 30
출석 20
과제물 및 기타 30

수업시간에 한 것을 과제로 복습하기

※ 과제가 많을 수 있음
※ 복습은 무조건 하기



# 소프트웨어 공학 개론

Q ) 화학과와 화학공학과의 차이?

A ) 
화학과 : 순수한 이론
화학공학과 : 공업적인 업무, 대량생산
소프트웨어 공학 : 안전하게 만든다, 대량생산, 협업

그러나 돈을 주고 팔때는 내 맘대로 만들 수 없다!

큰 프로젝트나 안정화된 프로젝트를 만들때는 혼자 후다닥 만드는
것보다는 엔지니어링 기법을 적용한 것이 더 안정적이다 ( 장점 )


Q ) 소프트웨어 공학만 가지고 있는 특징?
A ) 
소프트웨어는 실체가 없다. 눈으로 보이지 않는다 -> 추상적이다
그래서 현업에서 작업을 할 때 제어하기 쉽지않다


Q ) 프로그램 vs 소프트웨어
A )
프로그램 : 우리가 만든 소스코드와 바이너리 -> 개발만 하는 사람
소프트웨어 : 그 외의 것 -> 설계와 테스트까지


# 갖춰야 할 역량

글쓰는 능력

why? ) 
레벨이 올라갈수록 개발쪽으로만 가는 것이 아니다
10년차가 지난다면 글쓰기를 요구할 수 있다

-> 최소한 일기라도 쓰기
-> 이공대 글쓰기 연습하기


# 소프트웨어 공학 Overview

SW개발, SW공학개념 -> SW프로세스모델, SW개발방법 ★기초
SW품질, SW프로젝트 -> 형상관리★★★

어딘가에 입사해서 3년간 경력을 쌓고 이직을 해서 대기업 신입으로 들어가기!
실제 프로젝트에서 쓰이는 역량을 알려주는 학원은 없기 때문이다


※ 국제 표준들을 정리해 놓은 곳이 있다
번역의 질이 좋지는 않다
ex) 소프트웨어 프로세스 : IEEE-STED-610


# 소프트웨어 프로세스

요구사항
디자인
구현
코딩


Q ) 실제 소프트웨어를 개발할 때는 탑다운 vs 바텀업
A ) 대부분 탑다운 기법을 쓴다


# 소프트웨어 생명주기 모델

1) 주먹구구식 개발 모델 -> 소규모 개발
2) 폭포수 모델
3) 원형 모델
4) 나선형 모델
5) V-모델 -> 안전한 소프트웨어를 만들때 활용
각 단계마다 대응하는 확인 단계를 두어 정확한 고객 요구사항을 확인가능


# 소프트웨어 개발 방법론

정의 : 소프트웨어 개발 생명주기 내의 각 단계에서의 수행 활동과 방법을 구체적으로 정의

- 대세 개발 방법론 : Agile
1) 구조적 방법론
2) 객체지향 방법론
3) CBD
4) Agile

※ 모든 개발 방법론을 사용한다!

ex) 인베디드 소프트웨어 -> 구조적 방법론


# 개발 방법론 구성요소 ★

1) 절차
2) 방법
3) 산출물
4) 관리
5) 기법
6) 도구


# 1. 구조적 방법론

- 정의 : 전통적인 Top-Down 방식의 개발 방법

- 기본원리 
구조화-수평분리 : 입력 / 자료변환 / 출력 (IPO)
구성요소는 데이터 / 처리

ex) 큰 돌에서 -> 석상으로 만들기


# 2. 객체지향 방법론

- 정의 : Bottom - Up의 방법

- 기본원리
객체 : 최소 단위의 값과 실행할 수 있는 기능이 있는 것

- 객체지향 방법
객체를 식별하는 것



# 3. CBD

Q ) 객체와 컴포넌트의 차이?
A ) 컴포넌트 : 독립적으로 쓸 만한 아이들을 뭉쳐놓은 것

컴포넌트를 만들 수 있는 시간 -> sprint



# 4. Agile


# 요구사항

- 기능적 요구사항
실제로 수행해야 할 기능
ex) 워드 프로세서에서 파일 저장 기능, 편집 기능, 보기 기능 등

- 비-기능적 요구사항
품질
ex) 성능(응답 시간, 처리량), 사용의 용이성, 신뢰도, 보안성, 운용상의 제약, 안정성 등

★요구사항이 전체에서 차지하는 비율은 100중에서 60이다!

요구사항 계획 / 분석 / 설계를 나눌 수는 없다

★ 요구사항 : 고객의 요구사항을 정확하게 분석할 수 있어야 한다!

ex) 실패한 사례 : 키오스크


# 외국에서는 개발 업무보다 test 및 pm (품질관리) 부분이 직급이 더 높다
QC? -> 요구사항 단계
test는 구현물이 제대로 작동하는지 확인하는 것이다

자동화 되어도 결국 개발은 사람이 해야 한다 (노동집약적)



# 소프트웨어 동적 검증

1) unit >> 함수 하나하나가 제대로 동작하는지
2) integrated >> 만들어진 프로세스, 컴포넌트대로 결과값을 내보내는지, 경로가 제대로 거쳐가는지



# 테스트 기법

- 3 : Fault injection test
정의 : 주입된 결함이 소프트웨어에 어떻게 전파되는 것을 확인하는 테스트의 목적

- 4 : Resource Usage test

- 5 :Back to Back Test
정의 : 시뮬레이션 모델과 실제 수행 코드와의 일치성 여부를 검증함






































